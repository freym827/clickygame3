{"version":3,"sources":["components/Header/Header.js","components/NickPic/NickPic.js","components/Wrapper/Wrapper.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","id","React","Component","NickPic","props","onClick","shuffleNicks","alt","name","src","image","Wrapper","children","Footer","App","state","nicks","_this","reclick","document","getElementById","score","Number","innerHTML","i","length","count","endgame","temp","rand","currentIndex","Math","floor","random","setState","_this2","this","components_Header_Header","components_Wrapper_Wrapper","map","components_NickPic_NickPic","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce9534de.chunk.js","sourcesContent":["import React from \"react\"\r\nimport './Header.css';\r\n class Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n              <div className=\"tophead\">\r\n                <h1 id=\"result\" className=\"resulttxt\">Click a Nick to play!</h1>\r\n                <p className=\"score\">Score:<span id=\"s\">0</span></p>\r\n                <p className=\"tscore\">Top Score:<span id=\"ts\">0</span></p>\r\n              </div>\r\n              <div className=\"bottomhead\">\r\n                <h1 className=\"btitle\">Clicky Game</h1>\r\n                <h1 className=\"binstruct\">Click an image to begin!</h1>\r\n                <p className=\"binstruct\">Dont click an image more than once!</p>\r\n               </div>\r\n             </div>\r\n         )\r\n     }\r\n }\r\n \r\n export default Header","import React from \"react\";\r\nimport './NickPic.css';\r\n const NickPic = props => (\r\n  <img onClick={() => props.shuffleNicks(props.id)} className=\"nickpics\" alt={props.name} src={props.image} />\r\n);\r\n export default NickPic;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n const Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\nexport default Wrapper;","import React from \"react\"\r\nimport \"./Footer.css\";\r\n\r\n class Footer extends React.Component {\r\n    render() {\r\n         return (\r\n             <div className=\"footer\">\r\n               <p className=\"fttxt\">Made with love from Ohio</p>\r\n             </div>\r\n         )\r\n     }\r\n }\r\n \r\n export default Footer","import React from \"react\"\nimport Header from \"./components/Header\"\nimport NickPic from \"./components/NickPic\"\nimport Wrapper from \"./components/Wrapper\";\nimport Footer from \"./components/Footer\";\nimport nicks from \"./nicks.json\";\n\n class App extends React.Component {\n \n   state = {\n    nicks\n  };\n   shuffleNicks = id => {\n    const nicks = this.state.nicks\n    const reclick = document.getElementById(\"result\")\n    let score = Number(document.getElementById(\"s\").innerHTML)\n    \n    for(let i=0;i<nicks.length;i++) {\n      if(nicks[i].id === id) {\n        nicks[i].count +=1\n        if(nicks[i].count === 2) {\n          reclick.innerHTML = \"You Guessed WRONG. Start Over\"\n          this.endgame()\n          return\n        }\n      }\n    }\n    reclick.innerHTML = \"You Guessed Correctly\"\n    score +=1\n    document.getElementById(\"s\").innerHTML = score\n    let currentIndex = nicks.length, temp, rand;\n     while (0 !== currentIndex) {\n      rand = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temp = nicks[currentIndex];\n      nicks[currentIndex] = nicks[rand];\n      nicks[rand] = temp;\n    }\n     this.setState({ nicks });\n  };\n   endgame = () => {\n    let score = Number(document.getElementById(\"s\").innerHTML)\n    let tscore = Number(document.getElementById(\"ts\").innerHTML)\n    if(score>tscore) {\n      document.getElementById(\"ts\").innerHTML = score\n    }\n    document.getElementById(\"s\").innerHTML = 0\n    const nicks = this.state.nicks\n    for(let i=0;i<nicks.length;i++) {\n        nicks[i].count =0\n    }\n    this.setState({ nicks });\n  }\n\n  render() {\n    return (\n       <div>\n         <Header />\n        <Wrapper>\n          {this.state.nicks.map(nicks => (\n            <NickPic\n              shuffleNicks={this.shuffleNicks}\n              id={nicks.id}\n              key={nicks.id}\n              name={nicks.name}\n              image={nicks.image}\n              count={nicks.count}\n            />\n          ))}\n        </Wrapper>\n         <Footer />\n \n       </div>\n     )\n   }\n }\n \n export default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}